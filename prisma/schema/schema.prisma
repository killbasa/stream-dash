generator client {
    provider = "prisma-client"
    output   = "../../src/lib/server/db/generated"

    previewFeatures = ["queryCompiler", "driverAdapters", "relationJoins"]

    runtime      = "nodejs"
    moduleFormat = "esm"
}

datasource database {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Whitelist {
    id String @id @default(uuid())

    email         String   @unique
    defaultRole   String?
    defaultScopes String[]

    @@map("whitelist")
}

model LiveInput {
    id           String   @id @default(uuid())
    cloudflareId String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    type              LiveInputType?
    name              String
    description       String?
    ingestWebrtcUrl   String         @unique
    playbackWebrtcUrl String         @unique

    status LiveInputStatus? @default(disconnected)

    ingestFor   Block[] @relation("LiveInputIngestForBlocks")
    playbackFor Block[] @relation("LiveInputPlaybackForBlocks")

    @@unique([type, name])
    @@map("live_input")
}

enum LiveInputType {
    ingest
    return
}

enum LiveInputStatus {
    connected
    disconnected
    errored
}

model Talent {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String  @unique
    description String?

    imageId  String?
    imageUrl String?

    blocks Block[]

    @@map("talent")
}

model Location {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String  @unique
    description String?

    blocks Block[]

    @@map("location")
}

model Block {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?
    start       DateTime // Specify TZ
    end         DateTime // Specify TZ

    talents Talent[]

    ingestLiveInputId String?
    ingestLiveInput   LiveInput? @relation("LiveInputIngestForBlocks", fields: [ingestLiveInputId], references: [id], onDelete: Restrict)

    playbackLiveInputId String?
    playbackLiveInput   LiveInput? @relation("LiveInputPlaybackForBlocks", fields: [playbackLiveInputId], references: [id], onDelete: Restrict)

    locationId String?
    location   Location? @relation(fields: [locationId], references: [id], onDelete: Restrict)

    @@map("block")
}

model Webhook {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accountId       String @unique
    notificationUrl String
    secret          String

    @@map("webhook")
}
